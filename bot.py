from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import json
import os
import csv
from datetime import datetime

SELECT_QUESTION, ANSWER_QUESTION = range(2)
DATA_FILE = "coffee_bot_data.json"
CSV_FILE = "winners.csv"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"questions": {}, "user_answers": {}}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def init_csv():
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['question_number', 'username', 'date'])

def save_winner_to_csv(question_number, username):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å
        winners = {}
        if os.path.exists(CSV_FILE):
            with open(CSV_FILE, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    winners[row['question_number']] = row
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
        if question_number in winners:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([question_number, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def is_question_available(question_number):
    try:
        if not os.path.exists(CSV_FILE):
            return True
        
        with open(CSV_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row['question_number'] == question_number:
                    return False
        return True
    except:
        return True

def get_available_questions():
    try:
        if not os.path.exists(CSV_FILE):
            return [str(i) for i in range(1, 101)]
        
        taken_questions = set()
        with open(CSV_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                taken_questions.add(row['question_number'])
        
        return [str(i) for i in range(1, 101) if str(i) not in taken_questions]
    except:
        return [str(i) for i in range(1, 101)]

def get_user_answered_questions(user_id):
    data = load_data()
    user_answers = data["user_answers"].get(user_id, {})
    return list(user_answers.keys())

def init_questions():
    data = load_data()
    if not data["questions"]:
        questions = {}
        coffee_questions = [
            {"question": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–¥–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–∞—Ä–∏–≤–∞–Ω–∏—è –∫–æ—Ñ–µ?", "answer": "90-96"},
            {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ñ–µ–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ —Å –º–æ–ª–æ–∫–æ–º?", "answer": "–ª–∞—Ç—Ç–µ"},
            {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—å—é—Ç –∫–æ—Ñ–µ?", "answer": "—Ñ–∏–Ω–ª—è–Ω–¥–∏—è"},
            {"question": "–ö–∞–∫–æ–π —Å–æ—Ä—Ç –∫–æ—Ñ–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º—ã–º –¥–æ—Ä–æ–≥–∏–º –≤ –º–∏—Ä–µ?", "answer": "–∫–æ–ø–∏ –ª—É–≤–∞–∫"},
            {"question": "–°–∫–æ–ª—å–∫–æ –º–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —á–∞—à–∫–µ —ç—Å–ø—Ä–µ—Å—Å–æ?", "answer": "30"}
        ]
        
        for i in range(1, 101):
            if i <= len(coffee_questions):
                questions[str(i)] = coffee_questions[i-1]
            else:
                questions[str(i)] = {"question": f"–ö–æ—Ñ–µ–π–Ω—ã–π –¥–æ—Å—å–µ #{i}", "answer": f"–æ—Ç–≤–µ—Ç{i}"}
        
        data["questions"] = questions
        save_data(data)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"""‚òï–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É ¬´–§–∞–±—Ä–∏–∫–∞ –∫–æ—Ñ–µ¬ª!¬ª, {user.first_name}!

üéØ –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –¥–æ—Å—å–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤!

üìù –ü—Ä–∞–≤–∏–ª–∞:

‚Ä¢ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –∏–∑ –æ—Å–µ–Ω–Ω–µ–≥–æ –º–µ–Ω—é –≤ –Ω–∞—à–µ–π –§–∞–±—Ä–∏–∫–µ - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ —Ä—É–∫–∏ –æ–¥–Ω–æ –¥–æ—Å—å–µ: —Å–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∏ –Ω–∞–∑–≤–∞—Ç—å –∏–º—è –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ üïµ

‚Ä¢–ß–µ–º –±–æ–ª—å—à–µ –¥–æ—Å—å–µ –≤—ã —Ä–∞–∑–≥–∞–¥–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑!

üèÜ –ò—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—É–¥—É—Ç –≤ –Ω–∞—à–µ–º Telegram –∫–∞–Ω–∞–ª–µ!

–£–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ –¥–æ—Å—å–µ? –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∏–≥—Ä–µ!

üéÅ –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–∑–≥–∞–¥–∫–µ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–º–µ—Ä –¥–æ—Å—å–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –ø–æ–ø–∞–ª–æ—Å—å (1-100)"""
    
    keyboard = [
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ—Å—å–µ")],
        [KeyboardButton("üèÜ –ú–æ–∏ –¥–æ—Å—å–µ"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return SELECT_QUESTION

async def show_available_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        available_questions = get_available_questions()
        if available_questions:
            text = "üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–æ—Å—å–µ:\n" + "\n".join([f"‚Ä¢ –¥–æ—Å—å–µ {q}" for q in available_questions[:15]])
            if len(available_questions) > 15:
                text += f"\n\n... –∏ –µ—â–µ {len(available_questions) - 15} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ—Å—å–µ!"
        else:
            text = "‚ùå –í—Å–µ –¥–æ—Å—å–µ —É–∂–µ –∑–∞–Ω—è—Ç—ã!"
        text += "\n\nüìù –ß—Ç–æ–±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å –¥–æ—Å—å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä"
        await update.message.reply_text(text)
    except:
        await update.message.reply_text("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –¥–æ—Å—å–µ –æ—Ç 1 –¥–æ 100")

async def show_my_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    answered_questions = get_user_answered_questions(user_id)
    
    if answered_questions:
        text = "üèÜ –í–∞—à–∏ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n" + "\n".join([f"‚Ä¢ –¥–æ—Å—å–µ {q}" for q in answered_questions])
        text += f"\n\nüéØ –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–æ—Å—å–µ: {len(answered_questions)}"
    else:
        text = "üìù –í—ã –µ—â–µ –Ω–µ —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –Ω–∏ –æ–¥–∏–∏–Ω –¥–æ—Å—å–µ."
    
    text += "\n\nüéÅ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
    await update.message.reply_text(text)

async def select_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_input = update.message.text
    data = load_data()
    
    if user_input == "üìã –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ—Å—å–µ":
        await show_available_questions(update, context)
        return SELECT_QUESTION
    elif user_input == "üèÜ –ú–æ–∏ –¥–æ—Å—å–µ":
        await show_my_answers(update, context)
        return SELECT_QUESTION
    elif user_input == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return SELECT_QUESTION
    
    if not user_input.isdigit() or not (1 <= int(user_input) <= 100):
        await update.message.reply_text("‚ùå –¥–æ—Å—å–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 100")
        return SELECT_QUESTION
    
    question_number = user_input
    
    user_answers = data["user_answers"].get(user_id, {})
    if question_number in user_answers:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–æ—Å—å–µ!")
        return SELECT_QUESTION
    
    if not is_question_available(question_number):
        await update.message.reply_text("‚ùå –ö—Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –¥–æ—Å—å–µ —É–∂–µ –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ—Å—å–µ.")
        return SELECT_QUESTION
    
    context.user_data['current_question'] = question_number
    await update.message.reply_text(f"‚ùì –î–æ—Å—å–µ#{question_number}\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç! –ö—Ç–æ —ç—Ç–æ—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π?")
    return ANSWER_QUESTION

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.lower().strip()
    user_id = str(update.message.from_user.id)
    user = update.message.from_user
    question_number = context.user_data.get('current_question')
    
    data = load_data()
    question_data = data["questions"][question_number]
    correct_answer = question_data["answer"].lower().strip()
    
    if user_answer == correct_answer:
        username = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
        
        if save_winner_to_csv(question_number, username):
            if user_id not in data["user_answers"]:
                data["user_answers"][user_id] = {}
            
            data["user_answers"][user_id][question_number] = {
                "username": username,
                "date": datetime.now().isoformat()
            }
            save_data(data)
            
            user_answers_count = len(data["user_answers"][user_id])
            
            success_text = f"""üéâ –ü–†–ê–í–ò–õ–¨–ù–û! 

üèÜ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –¥–æ—Å—å–µ #{question_number}!

üìä –í—Å–µ–≥–æ –≤–∞—à–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_answers_count}

üì¢ –ò—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:

üëâ @fabrika_coffee_life üëà

üí´ –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø—Ä–∏–∑!"""
            
            await update.message.reply_text(success_text)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –¥–æ—Å—å–µ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.")
    else:
        await update.message.reply_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ—Å—å–µ!")
    
    context.user_data.pop('current_question', None)
    return SELECT_QUESTION

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """‚ùì –ü–æ–º–æ—â—å:

üìù –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤:
‚Ä¢ –†–∞–∑–≥–∞–¥—ã–∞–π –õ–Æ–ë–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—å–µ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—å–µ –æ—Ç 1 –¥–æ 100
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç = —à–∞–Ω—Å –Ω–∞ –ø—Ä–∏–∑
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å!

üèÜ –ò—Ç–æ–≥–∏ –≤ –∫–∞–Ω–∞–ª–µ: @fabrika_coffee_life

üéØ –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ—Å—å–µ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—å–µ
‚Ä¢ –ú–æ–∏ –¥–æ—Å—å–µ - –≤–∞—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    await update.message.reply_text(help_text)

def main():
    init_questions()
    init_csv()
    app = Application.builder().token("8450057853:AAGVsuOUyK0s3F3LsrC07wGwgukC6e7V8GI").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            SELECT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_question)],
            ANSWER_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question)],
        },
        fallbacks=[CommandHandler("help", help_command)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    print("‚òï –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()